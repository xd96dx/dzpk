// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: register.proto
#ifndef GRPC_register_2eproto__INCLUDED
#define GRPC_register_2eproto__INCLUDED

#include "register.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class Register final {
 public:
  static constexpr char const* service_full_name() {
    return "Register";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::UserRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>> AsyncUserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>>(AsyncUserRegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>> PrepareAsyncUserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>>(PrepareAsyncUserRegRaw(context, request, cq));
    }
    virtual ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::HeartBeatRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>> AsyncHeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>>(AsyncHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>> PrepareAsyncHeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>>(PrepareAsyncHeartBeatRaw(context, request, cq));
    }
    virtual ::grpc::Status joinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::JoinRoomResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>> AsyncjoinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>>(AsyncjoinRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>> PrepareAsyncjoinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>>(PrepareAsyncjoinRoomRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UserReg(::grpc::ClientContext* context, const ::UserMsg* request, ::UserRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserReg(::grpc::ClientContext* context, const ::UserMsg* request, ::UserRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void joinRoom(::grpc::ClientContext* context, const ::JoinRoom* request, ::JoinRoomResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void joinRoom(::grpc::ClientContext* context, const ::JoinRoom* request, ::JoinRoomResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>* AsyncUserRegRaw(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserRsp>* PrepareAsyncUserRegRaw(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HeartBeatRsp>* PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>* AsyncjoinRoomRaw(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JoinRoomResp>* PrepareAsyncjoinRoomRaw(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::UserRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRsp>> AsyncUserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRsp>>(AsyncUserRegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRsp>> PrepareAsyncUserReg(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserRsp>>(PrepareAsyncUserRegRaw(context, request, cq));
    }
    ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::HeartBeatRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>> AsyncHeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>>(AsyncHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>> PrepareAsyncHeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>>(PrepareAsyncHeartBeatRaw(context, request, cq));
    }
    ::grpc::Status joinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::JoinRoomResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>> AsyncjoinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>>(AsyncjoinRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>> PrepareAsyncjoinRoom(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>>(PrepareAsyncjoinRoomRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UserReg(::grpc::ClientContext* context, const ::UserMsg* request, ::UserRsp* response, std::function<void(::grpc::Status)>) override;
      void UserReg(::grpc::ClientContext* context, const ::UserMsg* request, ::UserRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response, std::function<void(::grpc::Status)>) override;
      void HeartBeat(::grpc::ClientContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void joinRoom(::grpc::ClientContext* context, const ::JoinRoom* request, ::JoinRoomResp* response, std::function<void(::grpc::Status)>) override;
      void joinRoom(::grpc::ClientContext* context, const ::JoinRoom* request, ::JoinRoomResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::UserRsp>* AsyncUserRegRaw(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserRsp>* PrepareAsyncUserRegRaw(::grpc::ClientContext* context, const ::UserMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HeartBeatRsp>* PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>* AsyncjoinRoomRaw(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JoinRoomResp>* PrepareAsyncjoinRoomRaw(::grpc::ClientContext* context, const ::JoinRoom& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UserReg_;
    const ::grpc::internal::RpcMethod rpcmethod_HeartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_joinRoom_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UserReg(::grpc::ServerContext* context, const ::UserMsg* request, ::UserRsp* response);
    virtual ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response);
    virtual ::grpc::Status joinRoom(::grpc::ServerContext* context, const ::JoinRoom* request, ::JoinRoomResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserReg() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserReg(::grpc::ServerContext* context, ::UserMsg* request, ::grpc::ServerAsyncResponseWriter< ::UserRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HeartBeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartBeat(::grpc::ServerContext* context, ::HeartBeatMsg* request, ::grpc::ServerAsyncResponseWriter< ::HeartBeatRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_joinRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestjoinRoom(::grpc::ServerContext* context, ::JoinRoom* request, ::grpc::ServerAsyncResponseWriter< ::JoinRoomResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UserReg<WithAsyncMethod_HeartBeat<WithAsyncMethod_joinRoom<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserReg() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::UserMsg, ::UserRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserMsg* request, ::UserRsp* response) { return this->UserReg(context, request, response); }));}
    void SetMessageAllocatorFor_UserReg(
        ::grpc::MessageAllocator< ::UserMsg, ::UserRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserMsg, ::UserRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserReg(
      ::grpc::CallbackServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HeartBeat() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::HeartBeatMsg, ::HeartBeatRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::HeartBeatMsg* request, ::HeartBeatRsp* response) { return this->HeartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_HeartBeat(
        ::grpc::MessageAllocator< ::HeartBeatMsg, ::HeartBeatRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::HeartBeatMsg, ::HeartBeatRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_joinRoom() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::JoinRoom, ::JoinRoomResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::JoinRoom* request, ::JoinRoomResp* response) { return this->joinRoom(context, request, response); }));}
    void SetMessageAllocatorFor_joinRoom(
        ::grpc::MessageAllocator< ::JoinRoom, ::JoinRoomResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::JoinRoom, ::JoinRoomResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* joinRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UserReg<WithCallbackMethod_HeartBeat<WithCallbackMethod_joinRoom<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserReg() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HeartBeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_joinRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserReg() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserReg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HeartBeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_joinRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestjoinRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserReg() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserReg(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserReg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HeartBeat() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HeartBeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_joinRoom() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->joinRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* joinRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserReg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserReg() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserMsg, ::UserRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserMsg, ::UserRsp>* streamer) {
                       return this->StreamedUserReg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserReg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserReg(::grpc::ServerContext* /*context*/, const ::UserMsg* /*request*/, ::UserRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserReg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserMsg,::UserRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HeartBeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::HeartBeatMsg, ::HeartBeatRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::HeartBeatMsg, ::HeartBeatRsp>* streamer) {
                       return this->StreamedHeartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* /*context*/, const ::HeartBeatMsg* /*request*/, ::HeartBeatRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HeartBeatMsg,::HeartBeatRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_joinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_joinRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::JoinRoom, ::JoinRoomResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::JoinRoom, ::JoinRoomResp>* streamer) {
                       return this->StreamedjoinRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_joinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status joinRoom(::grpc::ServerContext* /*context*/, const ::JoinRoom* /*request*/, ::JoinRoomResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedjoinRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::JoinRoom,::JoinRoomResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UserReg<WithStreamedUnaryMethod_HeartBeat<WithStreamedUnaryMethod_joinRoom<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UserReg<WithStreamedUnaryMethod_HeartBeat<WithStreamedUnaryMethod_joinRoom<Service > > > StreamedService;
};


#endif  // GRPC_register_2eproto__INCLUDED
